diff --git a/lua/copilot/client/filetypes.lua b/lua/copilot/client/filetypes.lua
index 1dff66d..0e97f61 100644
--- a/lua/copilot/client/filetypes.lua
+++ b/lua/copilot/client/filetypes.lua
@@ -47,11 +47,11 @@ local function resolve_filetype_enabled(filetype_enabled)
   return filetype_enabled
 end
 
 ---@param ft string
 ---@param filetypes table<string, boolean>
----@return boolean ft_disabled
+---@return boolean? ft_disabled
 ---@return string? ft_disabled_reason
 function M.is_ft_disabled(ft, filetypes)
   if filetypes[ft] ~= nil then
     return not resolve_filetype_enabled(filetypes[ft]),
       string.format("'filetype' %s rejected by config filetypes[%s]", ft, ft)
@@ -72,9 +72,9 @@ function M.is_ft_disabled(ft, filetypes)
   if M.internal_filetypes[short_ft] ~= nil then
     return not M.internal_filetypes[short_ft],
       string.format("'filetype' %s rejected by internal_filetypes[%s]", ft, short_ft)
   end
 
-  return false
+  return nil
 end
 
 return M
diff --git a/lua/copilot/util.lua b/lua/copilot/util.lua
index b76b8c6..6be7ff3 100644
--- a/lua/copilot/util.lua
+++ b/lua/copilot/util.lua
@@ -36,12 +36,14 @@ end
 ---@return string? no_attach_reason
 function M.should_attach()
   local ft = config.filetypes
   local ft_disabled, ft_disabled_reason = require("copilot.client.filetypes").is_ft_disabled(vim.bo.filetype, ft)
 
-  if ft_disabled then
+  if ft_disabled == false then
     return not ft_disabled, ft_disabled_reason
+  elseif ft_disabled == true then
+    return false
   end
 
   local bufnr = vim.api.nvim_get_current_buf()
   local bufname = vim.api.nvim_buf_get_name(bufnr)
   local conf_attach = config.should_attach(bufnr, bufname)
